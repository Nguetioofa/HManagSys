<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - HManagSys</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/HManagSys.styles.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
</head>
<body>
    @{
        var isAuthenticated = Context.Session.GetString("SessionToken") != null;
        var currentUser = Context.Session.GetString("UserName");
        var currentCenter = Context.Session.GetString("CurrentCenterName");
        var currentRole = Context.Session.GetString("CurrentRole");
        var currentCenterId = Context.Session.GetInt32("CurrentCenterId");
    }

    @if (isAuthenticated)
    {
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
            <div class="container-fluid">
                <a class="navbar-brand" asp-controller="Dashboard" asp-action="Index">
                    <i class="fas fa-hospital-alt"></i>
                    HManagSys
                </a>

                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Dashboard" asp-action="Index">
                                <i class="fas fa-tachometer-alt"></i>
                                Tableau de bord
                            </a>
                        </li>

                        @if (currentRole == "SuperAdmin")
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-users-cog"></i>
                                    Administration
                                </a>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" asp-controller="Admin" asp-action="Index"><i class="fas fa-users"></i> Gestion Utilisateurs</a></li>
                                    <li><a class="dropdown-item" href="#"><i class="fas fa-hospital"></i> Centres</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="#"><i class="fas fa-chart-bar"></i> Rapports Globaux</a></li>
                                </ul>
                            </li>
                        }

                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user-md"></i>
                                Patients & Soins
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user-plus"></i> Nouveau Patient</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-search"></i> Rechercher Patient</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-stethoscope"></i> Épisodes de Soins</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-prescription"></i> Prescriptions</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-x-ray"></i> Examens</a></li>
                            </ul>
                        </li>

                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-box"></i>
                                Stocks & Ventes
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" asp-controller="stock" asp-action="Index"><i class="fas fa-inventory"></i> État des Stocks</a></li>
                                <li><a class="dropdown-item" asp-controller="product" asp-action="Index"><i class="fas fa-inventory"></i> Produits</a></li>
                                <li><a class="dropdown-item" asp-controller="productcategory" asp-action="Index"><i class="fas fa-inventory"></i> Categories</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-exchange-alt"></i> Mouvements</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-cash-register"></i> Nouvelle Vente</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-receipt"></i> Historique Ventes</a></li>
                            </ul>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link" href="#">
                                <i class="fas fa-money-bill-wave"></i>
                                Finances
                            </a>
                        </li>
                    </ul>

                    <ul class="navbar-nav">
                        <!-- Sélecteur de centre dynamique -->
                        <li class="nav-item dropdown" id="centerSwitchDropdown">
                            <a class="nav-link dropdown-toggle center-switch-link" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-hospital"></i>
                                <span id="current-center-name">@currentCenter</span>
                                <span class="badge bg-secondary ms-1" id="current-role">@currentRole</span>
                                <span class="spinner-border spinner-border-sm ms-2 d-none" id="center-loading" role="status">
                                    <span class="visually-hidden">Chargement...</span>
                                </span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" id="centerSwitchMenu">
                                <li>
                                    <h6 class="dropdown-header">
                                        <i class="fas fa-exchange-alt"></i>
                                        Changer de centre
                                    </h6>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li class="px-3 py-2 text-center">
                                    <div class="spinner-border spinner-border-sm text-primary" role="status">
                                        <span class="visually-hidden">Chargement...</span>
                                    </div>
                                </li>
                            </ul>
                        </li>

                        <!-- Menu utilisateur -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user-circle"></i>
                                @currentUser
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><h6 class="dropdown-header">Mon Compte</h6></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-user-edit"></i> Profil</a></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-key"></i> Changer mot de passe</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="#"><i class="fas fa-history"></i> Mon Activité</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <form asp-controller="Auth" asp-action="Logout" method="post" class="d-inline">
                                        <button type="submit" class="dropdown-item text-danger">
                                            <i class="fas fa-sign-out-alt"></i> Déconnexion
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    }

    <div class="@(isAuthenticated ? "container-fluid" : "")">
        <main role="main" class="@(isAuthenticated ? "p-3" : "")">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i>
                    @TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle"></i>
                    @TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            @RenderBody()
        </main>
    </div>

    @if (isAuthenticated)
    {
        <footer class="bg-light border-top mt-auto py-3">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <span class="text-muted">
                            &copy; 2025 - HManagSys - Système de Gestion Hospitalière
                        </span>
                    </div>
                    <div class="col-md-6 text-end">
                        <span class="text-muted">
                            <i class="fas fa-clock"></i>
                            <span id="currentTime"></span>
                        </span>
                    </div>
                </div>
            </div>
        </footer>
    }

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    @if (isAuthenticated)
    {
        <script>
            // Variables globales pour la gestion des centres
            let availableCenters = [];
            let currentCenterId = @(currentCenterId ?? 0);

            // Affichage de l'heure en temps réel
            function updateTime() {
                const now = new Date();
                const timeString = now.toLocaleTimeString('fr-FR');
                document.getElementById('currentTime').textContent = timeString;
            }
            updateTime();
            setInterval(updateTime, 1000);

            // Chargement des centres accessibles au clic sur le dropdown
            document.getElementById('centerSwitchDropdown').addEventListener('show.bs.dropdown', function() {
                loadAccessibleCenters();
            });

            // Fonction pour charger les centres accessibles
            async function loadAccessibleCenters() {
                const menu = document.getElementById('centerSwitchMenu');

                try {
                    const response = await fetch('@Url.Action("GetAccessibleCenters", "Auth")');
                    const result = await response.json();

                    if (result.success) {
                        updateCenterMenu(result.data);
                    } else {
                        console.error('Erreur lors du chargement des centres:', result.message);
                        showCenterMenuError();
                    }
                } catch (error) {
                    console.error('Erreur lors du chargement des centres:', error);
                    showCenterMenuError();
                }
            }

            // Fonction pour mettre à jour le menu des centres
            function updateCenterMenu(data) {
                const menu = document.getElementById('centerSwitchMenu');
                availableCenters = data.availableCenters;

                let menuHtml = `
                    <li><h6 class="dropdown-header">
                        <i class="fas fa-exchange-alt"></i>
                        Changer de centre
                    </h6></li>
                    <li><hr class="dropdown-divider"></li>
                `;

                data.availableCenters.forEach(center => {
                    const isActive = center.isCurrent ? 'active' : '';
                    const currentIcon = center.isCurrent ? '<i class="fas fa-check text-success me-2"></i>' : '';
                    const roleBadgeClass = center.roleInCenter === 'SuperAdmin' ? 'bg-danger' : 'bg-primary';

                    menuHtml += `
                        <li>
                            <a class="dropdown-item center-option ${isActive}"
                               href="#"
                               data-center-id="${center.hospitalCenterId}"
                               onclick="switchCenter(${center.hospitalCenterId}, event)">
                                <div class="d-flex align-items-center">
                                    <div class="me-2">
                                        <i class="fas fa-hospital ${center.isCurrent ? 'text-success' : 'text-secondary'}"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-bold">${center.centerName}</div>
                                        <small class="text-muted">${center.address}</small>
                                        <div>
                                            <span class="badge ${roleBadgeClass} badge-sm">${center.roleDisplayName}</span>
                                        </div>
                                    </div>
                                    ${currentIcon}
                                </div>
                            </a>
                        </li>
                    `;
                });

                menu.innerHTML = menuHtml;
            }

            // Fonction pour afficher une erreur dans le menu des centres
            function showCenterMenuError() {
                const menu = document.getElementById('centerSwitchMenu');
                menu.innerHTML = `
                    <li><h6 class="dropdown-header">Changer de centre</h6></li>
                    <li><hr class="dropdown-divider"></li>
                    <li class="px-3 py-2 text-center text-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                        Erreur lors du chargement
                    </li>
                `;
            }

              // Fonction pour changer de centre
            async function switchCenter(centerId, event) {
                event.preventDefault();

                // Éviter le changement si c'est déjà le centre actuel
                if (centerId === currentCenterId) {
                    console.log('Déjà sur ce centre.');
                    return;
                }

                // Afficher l'indicateur de chargement
                const loadingSpinner = document.getElementById('center-loading');
                const centerLink = document.querySelector('.center-switch-link'); // Assurez-vous que cet élément existe ou ajustez le sélecteur

                // Si centerLink est le dropdown lui-même, il pourrait être mieux de cibler le bouton du dropdown
                const dropdownButton = document.getElementById('centerSwitchDropdown'); // Ou un sélecteur plus précis pour le bouton visible

                if (dropdownButton) dropdownButton.classList.add('disabled');
                if (loadingSpinner) loadingSpinner.classList.remove('d-none');

                try {
                    // Préparer les données du formulaire
                    const formData = new FormData();
                    formData.append('centerId', centerId);

                    // Récupérer le token anti-forgery
                    const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                    const token = tokenInput ? tokenInput.value : '';

                    if (!token) {
                        console.error('Token anti-forgery non trouvé.');
                        showToast('Erreur de sécurité. Veuillez rafraîchir la page.', 'error');
                        return; // Arrêter si le token n'est pas trouvé
                    }

                    const response = await fetch('@Url.Action("SwitchCenter", "Auth")', { // URL sans query string pour centerId
                        method: 'POST',
                        headers: {
                            // 'Content-Type' n'est pas nécessaire avec FormData, le navigateur le définit correctement
                            // avec la bonne 'boundary' pour 'multipart/form-data'
                            // OU si vous voulez 'application/x-www-form-urlencoded', voir plus bas
                            'RequestVerificationToken': token
                        },
                        body: formData // Envoyer centerId dans le corps
                    });

                    // Si vous préférez 'application/x-www-form-urlencoded'
                    // const response = await fetch('@Url.Action("SwitchCenter", "Auth")', {
                    //     method: 'POST',
                    //     headers: {
                    //         'RequestVerificationToken': token,
                    //         'Content-Type': 'application/x-www-form-urlencoded'
                    //     },
                    //     body: new URLSearchParams({
                    //         'centerId': centerId
                    //     })
                    // });


                    if (!response.ok) { // Vérifier si la réponse HTTP elle-même est une erreur
                        let errorMessage = `Erreur HTTP ${response.status}: ${response.statusText}`;
                        try {
                             const errorResult = await response.json(); // Essayer de lire le corps de l'erreur JSON
                             errorMessage = errorResult.message || errorMessage;
                        } catch(e) {
                            // Pas de JSON dans la réponse d'erreur, ou erreur de parsing
                        }
                        console.error('Erreur lors du changement de centre:', errorMessage);
                        showToast(errorMessage, 'error');
                        return; // Arrêter ici
                    }

                    const result = await response.json();

                    if (result.success) {
                        // Mettre à jour l'affichage du centre actuel
                        const currentCenterNameEl = document.getElementById('current-center-name');
                        const currentRoleEl = document.getElementById('current-role');

                        if (currentCenterNameEl) currentCenterNameEl.textContent = result.centerName || '';
                        if (currentRoleEl) currentRoleEl.textContent = result.role || '';


                        // Mettre à jour la variable globale
                        currentCenterId = parseInt(centerId, 10); // Assurez-vous que c'est un nombre

                        // Afficher un message de succès
                        showToast(`Centre changé vers ${result.centerName}`, 'success');

                        // Recharger la page pour mettre à jour toutes les données
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);

                    } else {
                        showToast(result.message || 'Erreur lors du changement de centre', 'error');
                    }
                } catch (error) {
                    console.error('Erreur lors du changement de centre (catch):', error);
                    showToast('Une erreur technique est survenue lors du changement de centre.', 'error');
                } finally {
                    // Masquer l'indicateur de chargement
                    if (dropdownButton) dropdownButton.classList.remove('disabled');
                    if (loadingSpinner) loadingSpinner.classList.add('d-none');
                }
            }

            // Vérification périodique de la session
            setInterval(async function() {
                try {
                    const response = await fetch('@Url.Action("ValidateSession", "Auth")');
                    const result = await response.json();

                    if (!result.valid) {
                        if (result.expired) {
                            showToast('Votre session a expiré. Redirection vers la page de connexion...', 'warning');
                            setTimeout(() => {
                                window.location.href = '@Url.Action("Login", "Auth")';
                            }, 3000);
                        }
                    }
                } catch (error) {
                    console.error('Erreur lors de la vérification de session:', error);
                }
            }, 300000); // Vérifier toutes les 5 minutes

            // Fonction utilitaire pour les notifications toast
            function showToast(message, type = 'info') {
                const toastContainer = getOrCreateToastContainer();
                const toastId = 'toast-' + Date.now();

                let iconClass = 'fa-info-circle';
                let bgClass = 'bg-primary';

                switch(type) {
                    case 'success':
                        iconClass = 'fa-check-circle';
                        bgClass = 'bg-success';
                        break;
                    case 'error':
                        iconClass = 'fa-exclamation-circle';
                        bgClass = 'bg-danger';
                        break;
                    case 'warning':
                        iconClass = 'fa-exclamation-triangle';
                        bgClass = 'bg-warning';
                        break;
                }

                const toastHtml = `
                    <div id="${toastId}" class="toast align-items-center text-white ${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                <i class="fas ${iconClass} me-2"></i>
                                ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;

                toastContainer.insertAdjacentHTML('beforeend', toastHtml);

                const toastElement = document.getElementById(toastId);
                const toast = new bootstrap.Toast(toastElement, {
                    autohide: true,
                    delay: type === 'error' ? 8000 : 5000
                });

                toast.show();

                // Supprimer l'élément du DOM après fermeture
                toastElement.addEventListener('hidden.bs.toast', () => {
                    toastElement.remove();
                });
            }

            // Fonction pour créer ou récupérer le conteneur de toasts
            function getOrCreateToastContainer() {
                let container = document.getElementById('toast-container');
                if (!container) {
                    container = document.createElement('div');
                    container.id = 'toast-container';
                    container.className = 'toast-container position-fixed top-0 end-0 p-3';
                    container.style.zIndex = '9999';
                    document.body.appendChild(container);
                }
                return container;
            }

            // Initialisation au chargement de la page
            document.addEventListener('DOMContentLoaded', function() {
                // Pré-charger les centres accessibles si nécessaire
                // loadAccessibleCenters();
            });
        </script>
    }

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>