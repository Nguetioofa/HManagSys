@using HManagSys.Models.ViewModels.Reports
@model PaymentReportViewModel
@{
    ViewData["Title"] = "Rapport des Paiements";
}

<div class="container-fluid">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800"><i class="fas fa-credit-card"></i> Rapport des Paiements</h1>
        <div>
            <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#exportModal">
                <i class="fas fa-file-export"></i> Exporter
            </button>
            <a href="@Url.Action("Index", "Report")" class="btn btn-sm btn-secondary">
                <i class="fas fa-arrow-left"></i> Retour
            </a>
        </div>
    </div>

    <!-- Filtres -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Filtres</h6>
        </div>
        <div class="card-body">
            <form id="filterForm" method="get" action="@Url.Action("PaymentReport", "Report")">
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="HospitalCenterId">Centre</label>
                            <select class="form-select" id="HospitalCenterId" name="HospitalCenterId">
                                @foreach (var item in ViewBag.Centers)
                                {
                                    <option value="@item.Value" @* @(Model.Filters != null && ((PaymentReportFilters)Model.Filters).HospitalCenterId.ToString() == item.Value ? "selected" : "") *@>@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="PaymentMethodId">Méthode de paiement</label>
                            <select class="form-select" id="PaymentMethodId" name="PaymentMethodId">
                                @foreach (var item in ViewBag.PaymentMethods)
                                {
                                    <option value="@item.Value" @* @(Model.Filters != null && ((PaymentReportFilters)Model.Filters).PaymentMethodId.ToString() == item.Value ? "selected" : "") *@>@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="ReferenceType">Type de référence</label>
                            <select class="form-select" id="ReferenceType" name="ReferenceType">
                                @foreach (var item in ViewBag.ReferenceTypes)
                                {
                                    <option value="@item.Value" @* @(Model.Filters != null && ((PaymentReportFilters)Model.Filters).ReferenceType == item.Value ? "selected" : "") *@>@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="ReceivedBy">Reçu par</label>
                            <select class="form-select" id="ReceivedBy" name="ReceivedBy">
                                @foreach (var item in ViewBag.Receivers)
                                {
                                    <option value="@item.Value" @* @(Model.Filters != null && ((PaymentReportFilters)Model.Filters).ReceivedBy.ToString() == item.Value ? "selected" : "") *@>@item.Text</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="FromDate">Date de début</label>
                            <input type="date" class="form-control" id="FromDate" name="FromDate" 
                                   value="@(Model.Filters != null ? ((PaymentReportFilters)Model.Filters).FromDate?.ToString("yyyy-MM-dd") : DateTime.Now.AddMonths(-1).ToString("yyyy-MM-dd"))">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="ToDate">Date de fin</label>
                            <input type="date" class="form-control" id="ToDate" name="ToDate" 
                                   value="@(Model.Filters != null ? ((PaymentReportFilters)Model.Filters).ToDate?.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd"))">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="MinAmount">Montant minimum</label>
                            <input type="number" class="form-control" id="MinAmount" name="MinAmount" 
                                   value="@(Model.Filters != null ? ((PaymentReportFilters)Model.Filters).MinAmount : null)">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group mb-2">
                            <label for="MaxAmount">Montant maximum</label>
                            <input type="number" class="form-control" id="MaxAmount" name="MaxAmount" 
                                   value="@(Model.Filters != null ? ((PaymentReportFilters)Model.Filters).MaxAmount : null)">
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-12 text-end">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-filter"></i> Filtrer
                        </button>
                        <a href="@Url.Action("PaymentReport", "Report")" class="btn btn-outline-secondary">
                            <i class="fas fa-sync"></i> Réinitialiser
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Statistiques Rapides -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Paiements par Méthode</h6>
                </div>
                <div class="card-body">
                    <div class="chart-bar">
                        <canvas id="paymentMethodChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Paiements par Type</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="referenceTypeChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tableau de données -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">Détails des Paiements</h6>
            <div>
                <span class="badge bg-success">Total: @Model.FormattedTotalPayments</span>
                <span class="badge bg-secondary">@Model.TotalCount paiements</span>
                @if (Model.TotalCount > 0)
                {
                    <span class="badge bg-info">Généré le: @Model.FormattedGeneratedAt</span>
                }
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="paymentsTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Patient</th>
                            <th>Centre</th>
                            <th>Méthode</th>
                            <th>Montant</th>
                            <th>Date</th>
                            <th>Reçu par</th>
                            <th>Référence</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            <tr>
                                <td>@item.PaymentId</td>
                                <td>
                                    <span class="@item.ReferenceTypeBadge">@item.ReferenceType</span>
                                </td>
                                <td>@item.PatientName</td>
                                <td>@item.HospitalCenterName</td>
                                <td>@item.PaymentMethodName</td>
                                <td class="text-end fw-bold">@item.FormattedAmount</td>
                                <td>@item.FormattedPaymentDate</td>
                                <td>@item.ReceivedByName</td>
                                <td>@item.TransactionReference</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal d'export -->
<div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportModalLabel">Exporter le Rapport</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="exportForm">
                    <div class="form-group mb-3">
                        <label for="exportFormat">Format</label>
                        <select class="form-select" id="exportFormat" name="format">
                            <option value="Excel">Excel (.xlsx)</option>
                            <option value="PDF">PDF (.pdf)</option>
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label for="exportTitle">Titre (optionnel)</label>
                        <input type="text" class="form-control" id="exportTitle" name="title" placeholder="Titre du rapport">
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="includeCharts" name="includeCharts" checked>
                        <label class="form-check-label" for="includeCharts">
                            Inclure les graphiques
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="exportExcel">
                    <i class="fas fa-file-excel"></i> Exporter en Excel
                </button>
                <button type="button" class="btn btn-danger" id="exportPdf">
                    <i class="fas fa-file-pdf"></i> Exporter en PDF
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Charger les graphiques
        document.addEventListener('DOMContentLoaded', function () {
            // Graphique des méthodes de paiement
            var methodLabels = [];
            var methodValues = [];
            
            @foreach (var item in Model.PaymentsByMethod)
            {
                <text>
                methodLabels.push('@item.Key');
                methodValues.push(@item.Value);
                </text>
            }
            
            var methodCtx = document.getElementById('paymentMethodChart').getContext('2d');
            var methodChart = new Chart(methodCtx, {
                type: 'bar',
                data: {
                    labels: methodLabels,
                    datasets: [{
                        label: 'Montant (FCFA)',
                        data: methodValues,
                        backgroundColor: 'rgba(78, 115, 223, 0.8)',
                        borderColor: 'rgba(78, 115, 223, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString() + ' FCFA';
                                }
                            }
                        }
                    }
                }
            });

            // Graphique des types de référence
            var typeLabels = [];
            var typeValues = [];
            var typeColors = ['#1cc88a', '#4e73df', '#36b9cc', '#f6c23e', '#e74a3b', '#858796'];
            var typeHoverColors = ['#17a673', '#2e59d9', '#2c9faf', '#dfa913', '#be3024', '#666666'];
            
            @foreach (var item in Model.PaymentsByReferenceType)
            {
                <text>
                typeLabels.push('@item.Key');
                typeValues.push(@item.Value);
                </text>
            }
            
            var typeCtx = document.getElementById('referenceTypeChart').getContext('2d');
            var typeChart = new Chart(typeCtx, {
                type: 'pie',
                data: {
                    labels: typeLabels,
                    datasets: [{
                        data: typeValues,
                        backgroundColor: typeColors.slice(0, typeLabels.length),
                        hoverBackgroundColor: typeHoverColors.slice(0, typeLabels.length),
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var label = context.label || '';
                                    var value = context.raw || 0;
                                    var percentage = Math.round(value / @Model.TotalPayments * 100);
                                    return label + ': ' + value.toLocaleString() + ' FCFA (' + percentage + '%)';
                                }
                            }
                        }
                    }
                }
            });

            // Datatable
            $(document).ready(function() {
                $('#paymentsTable').DataTable({
                    language: {
                        url: 'https://cdn.datatables.net/plug-ins/1.10.25/i18n/French.json'
                    },
                    order: [[6, 'desc']] // Trier par date décroissante
                });
            });

            // Export buttons
            $('#exportExcel').on('click', function() {
                var filters = @Html.Raw(Json.Serialize(Model.Filters));
                var filtersJson = JSON.stringify(filters);
                window.location.href = '@Url.Action("ExportToExcel", "Report")?reportType=PaymentReport&filters=' + encodeURIComponent(filtersJson);
            });
            
            $('#exportPdf').on('click', function() {
                var filters = @Html.Raw(Json.Serialize(Model.Filters));
                var filtersJson = JSON.stringify(filters);
                window.location.href = '@Url.Action("ExportToPdf", "Report")?reportType=PaymentReport&filters=' + encodeURIComponent(filtersJson);
            });
        });
    </script>
}