@model HManagSys.Models.ViewModels.Stock.ProductCategoryListViewModel
@{
    ViewData["Title"] = "Catégories de Produits";
}

<div class="container-fluid">
    <!-- En-tête avec titre et actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="fas fa-tags text-primary"></i>
                        Catégories de Produits
                    </h1>
                    <p class="text-muted mb-0">Gestion et organisation des catégories de produits</p>
                </div>
                <div class="d-flex gap-2">
                    <a asp-action="Create" class="btn btn-success">
                        <i class="fas fa-plus"></i>
                        Nouvelle catégorie
                    </a>
                    <a asp-action="Export" class="btn btn-outline-success">
                        <i class="fas fa-file-excel"></i>
                        Exporter
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistiques rapides -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <p class="text-white-50 small mb-1">Total Catégories</p>
                            <h3 class="mb-0">@Model.Statistics.TotalCategories</h3>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-tags fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <p class="text-white-50 small mb-1">Actives</p>
                            <h3 class="mb-0">@Model.Statistics.ActiveCategories</h3>
                            <small class="text-white-75">@Model.Statistics.ActivePercentage.ToString("F1")%</small>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-warning text-dark h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <p class="text-dark-50 small mb-1">Inactives</p>
                            <h3 class="mb-0">@Model.Statistics.InactiveCategories</h3>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-pause-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-3 col-md-6 mb-3">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col">
                            <p class="text-white-50 small mb-1">Total Produits</p>
                            <h3 class="mb-0">@Model.Statistics.TotalProducts</h3>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-boxes fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtres -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" action="@Url.Action("Index")" id="filtersForm">
                <div class="row align-items-end">
                    <div class="col-md-4">
                        <label class="form-label">Recherche</label>
                        <input type="text" class="form-control" name="searchTerm" 
                               value="@Model.Filters.SearchTerm" placeholder="Nom ou description...">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Statut</label>
                        <select class="form-select" name="isActive">
                            <option value="">Tous</option>
                            <option value="true" selected="@(Model.Filters.IsActive == true)">Actives</option>
                            <option value="false" selected="@(Model.Filters.IsActive == false)">Inactives</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Taille page</label>
                        <select class="form-select" name="pageSize">
                            <option value="10" selected="@(Model.Filters.PageSize == 10)">10</option>
                            <option value="20" selected="@(Model.Filters.PageSize == 20)">20</option>
                            <option value="50" selected="@(Model.Filters.PageSize == 50)">50</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button type="submit" class="btn btn-primary me-2">
                            <i class="fas fa-search"></i>
                            Filtrer
                        </button>
                        <button type="button" class="btn btn-outline-secondary" onclick="clearFilters()">
                            <i class="fas fa-times"></i>
                            Effacer
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Table des catégories -->
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="fas fa-list"></i>
                Liste des Catégories
                <span class="badge bg-secondary ms-2">@Model.Pagination.TotalCount</span>
            </h5>
        </div>
        <div class="card-body p-0">
            @if (Model.Categories.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Nom</th>
                                <th>Description</th>
                                <th>Produits</th>
                                <th>Statut</th>
                                <th>Créé le</th>
                                <th>Modifié le</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Model.Categories)
                            {
                                <tr id="category-@category.Id">
                                    <td>
                                        <strong>@category.Name</strong>
                                        @if (!category.IsActive)
                                        {
                                            <span class="badge bg-secondary ms-2">Inactif</span>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(category.Description))
                                        {
                                            if (category.Description.Length > 100)
                                            {
                                                <span title="@category.Description">
                                                    @category.Description.Substring(0, 100)...
                                                </span>
                                            }
                                            else
                                            {
                                                @category.Description
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-muted fst-italic">Aucune description</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-primary rounded-pill">@category.ProductCount</span>
                                    </td>
                                    <td>
                                        <span class="@category.StatusBadge">@category.StatusText</span>
                                    </td>
                                    <td>
                                        <small>
                                            @category.CreatedAt.ToString("dd/MM/yyyy")<br>
                                            <span class="text-muted">@category.CreatedByName</span>
                                        </small>
                                    </td>
                                    <td>
                                        @if (category.ModifiedAt.HasValue)
                                        {
                                            <small>
                                                @category.ModifiedAt.Value.ToString("dd/MM/yyyy")<br>
                                                <span class="text-muted">@category.ModifiedByName</span>
                                            </small>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@category.Id" 
                                               class="btn btn-sm btn-outline-primary" title="Détails">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a asp-action="Edit" asp-route-id="@category.Id" 
                                               class="btn btn-sm btn-outline-warning" title="Modifier">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button class="btn btn-sm btn-outline-@(category.IsActive ? "secondary" : "success")"
                                                    onclick="toggleStatus(@category.Id, @category.IsActive.ToString().ToLower())"
                                                    title="@(category.IsActive ? "Désactiver" : "Activer")">
                                                <i class="fas fa-@(category.IsActive ? "pause" : "play")"></i>
                                            </button>
                                            @if (category.ProductCount == 0)
                                            {
                                                <button class="btn btn-sm btn-outline-danger"
                                                        onclick="deleteCategory(@category.Id, '@category.Name')"
                                                        title="Supprimer">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Aucune catégorie trouvée</h5>
                    <p class="text-muted">Commencez par créer votre première catégorie de produits.</p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus"></i>
                        Créer une catégorie
                    </a>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.Pagination.TotalPages > 1)
        {
            <div class="card-footer">
                <nav aria-label="Navigation des pages">
                    <ul class="pagination justify-content-center mb-0">
                        <li class="page-item @(!Model.Pagination.HasPreviousPage ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { 
                                pageIndex = Model.Pagination.PreviousPage, 
                                Model.Filters.SearchTerm, 
                                Model.Filters.IsActive, 
                                Model.Filters.PageSize 
                            })">
                                <i class="fas fa-chevron-left"></i>
                                Précédent
                            </a>
                        </li>
                        
                        @for (int i = Math.Max(1, Model.Pagination.CurrentPage - 2); 
                              i <= Math.Min(Model.Pagination.TotalPages, Model.Pagination.CurrentPage + 2); 
                              i++)
                        {
                            <li class="page-item @(i == Model.Pagination.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { 
                                    pageIndex = i, 
                                    Model.Filters.SearchTerm, 
                                    Model.Filters.IsActive, 
                                    Model.Filters.PageSize 
                                })">
                                    @i
                                </a>
                            </li>
                        }
                        
                        <li class="page-item @(!Model.Pagination.HasNextPage ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { 
                                pageIndex = Model.Pagination.NextPage, 
                                Model.Filters.SearchTerm, 
                                Model.Filters.IsActive, 
                                Model.Filters.PageSize 
                            })">
                                Suivant
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
                <div class="text-center text-muted mt-2">
                    Affichage de @((Model.Pagination.CurrentPage - 1) * Model.Pagination.PageSize + 1) à 
                    @(Math.Min(Model.Pagination.CurrentPage * Model.Pagination.PageSize, Model.Pagination.TotalCount)) 
                    sur @Model.Pagination.TotalCount catégories
                </div>
            </div>
        }
    </div>
</div>

<!-- Token CSRF pour les requêtes AJAX -->
@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Fonction pour obtenir le token CSRF
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }

        // Activation/désactivation d'une catégorie
        function toggleStatus(categoryId, isActive) {
            const action = isActive ? 'désactiver' : 'activer';
            
            if (!confirm(`Êtes-vous sûr de vouloir ${action} cette catégorie ?`)) {
                return;
            }

            const formData = new FormData();
            formData.append('id', categoryId);
            formData.append('isActive', !isActive);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('@Url.Action("ToggleStatus")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showToast(result.message, 'success');
                    location.reload();
                } else {
                    showToast(result.message || 'Erreur lors du changement de statut', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showToast('Erreur lors du changement de statut', 'error');
            });
        }

        // Suppression d'une catégorie
        function deleteCategory(categoryId, categoryName) {
            if (!confirm(`Êtes-vous sûr de vouloir supprimer la catégorie "${categoryName}" ?\n\nCette action est irréversible.`)) {
                return;
            }

            const formData = new FormData();
            formData.append('id', categoryId);
            formData.append('__RequestVerificationToken', getAntiForgeryToken());

            fetch('@Url.Action("Delete")', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showToast(result.message, 'success');
                    location.reload();
                } else {
                    showToast(result.message || 'Erreur lors de la suppression', 'error');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                showToast('Erreur lors de la suppression', 'error');
            });
        }

        // Effacer les filtres
        function clearFilters() {
            window.location.href = '@Url.Action("Index")';
        }

        // Fonction utilitaire pour les notifications toast
        function showToast(message, type) {
            // Supprimer les anciens toasts
            const existingToasts = document.querySelectorAll('.toast-notification');
            existingToasts.forEach(toast => toast.remove());
            
            const alertClass = type === 'success' ? 'alert-success' : 
                             type === 'warning' ? 'alert-warning' :
                             type === 'info' ? 'alert-info' : 'alert-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'warning' ? 'fa-exclamation-triangle' :
                        type === 'info' ? 'fa-info-circle' : 'fa-exclamation-circle';
            
            const toast = document.createElement('div');
            toast.className = `alert ${alertClass} alert-dismissible fade show position-fixed toast-notification`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 350px;';
            toast.innerHTML = `
                <i class="fas ${icon}"></i> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(toast);
            
            // Auto-suppression après 5 secondes
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 5000);
        }

        // Auto-soumission du formulaire de filtres
        document.querySelectorAll('#filtersForm select').forEach(select => {
            select.addEventListener('change', () => {
                document.getElementById('filtersForm').submit();
            });
        });
        
        // Soumission sur Enter dans le champ de recherche
        document.querySelector('input[name="searchTerm"]').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                document.getElementById('filtersForm').submit();
            }
        });
    </script>
}

@section Styles {
    <style>
        .opacity-75 {
            opacity: 0.75;
        }
        
        .text-white-50 {
            color: rgba(255, 255, 255, 0.75);
        }
        
        .text-white-75 {
            color: rgba(255, 255, 255, 0.75);
        }
        
        .text-dark-50 {
            color: rgba(0, 0, 0, 0.5);
        }
        
        .toast-notification {
            animation: slideInRight 0.3s ease-out;
        }
        
        @@keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        .table-hover tbody tr:hover {
            background-color: rgba(0,123,255,0.1);
        }
        
        .btn-group .btn {
            border-radius: 0.25rem !important;
            margin-right: 2px;
        }
        
        .btn-group .btn:last-child {
            margin-right: 0;
        }
    </style>
}