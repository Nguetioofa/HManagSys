@model HManagSys.Models.ViewModels.Users.UserDetailsViewModel
@{
    ViewData["Title"] = $"Détails de {Model.FullName}";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">
                    <i class="fas fa-user-circle text-primary"></i>
                    Détails de l'utilisateur
                </h1>
                <div class="d-flex gap-2">
                    @if (Model.CanEdit)
                    {
                        <a asp-action="EditUser" asp-route-id="@Model.User.Id" class="btn btn-primary">
                            <i class="fas fa-edit"></i>
                            Modifier
                        </a>
                    }
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i>
                        Retour à la liste
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Informations personnelles -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-user"></i>
                        Informations personnelles
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="text-center">
                                <div class="avatar-lg mx-auto mb-3">
                                    <div class="avatar-title bg-primary text-white rounded-circle h1">
                                        @Model.User.FirstName.Substring(0, 1)@Model.User.LastName.Substring(0, 1)
                                    </div>
                                </div>
                                <span class="badge @Model.StatusBadgeClass badge-lg">
                                    <i class="fas fa-@(Model.User.IsActive ? "check" : "times")"></i>
                                    @Model.StatusText
                                </span>
                            </div>
                        </div>
                        <div class="col-sm-8">
                            <dl class="row">
                                <dt class="col-sm-5">Nom complet:</dt>
                                <dd class="col-sm-7">@Model.FullName</dd>

                                <dt class="col-sm-5">Email:</dt>
                                <dd class="col-sm-7">
                                    <a href="mailto:@Model.User.Email">@Model.User.Email</a>
                                </dd>

                                <dt class="col-sm-5">Téléphone:</dt>
                                <dd class="col-sm-7">
                                    <a href="tel:@Model.User.PhoneNumber">@Model.User.PhoneNumber</a>
                                </dd>

                                <dt class="col-sm-5">Compte créé:</dt>
                                <dd class="col-sm-7">@Model.User.CreatedAt.ToString("dd/MM/yyyy HH:mm")</dd>

                                <dt class="col-sm-5">Dernière modification:</dt>
                                <dd class="col-sm-7">
                                    @(Model.User.ModifiedAt?.ToString("dd/MM/yyyy HH:mm") ?? "Jamais")
                                </dd>

                                <dt class="col-sm-5">Dernière connexion:</dt>
                                <dd class="col-sm-7">
                                    @if (Model.LastConnection.HasValue)
                                    {
                                        <span>@Model.LastConnection.Value.ToString("dd/MM/yyyy HH:mm")</span>
                                        @if (Model.DaysSinceLastConnection >= 0)
                                        {
                                            <small class="text-muted">
                                                (il y a @Model.DaysSinceLastConnection jour@(Model.DaysSinceLastConnection > 1 ? "s" : ""))
                                            </small>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">Jamais connecté</span>
                                    }
                                </dd>
                            </dl>
                        </div>
                    </div>

                    @if (Model.User.MustChangePassword)
                    {
                        <div class="alert alert-warning mt-3">
                            <i class="fas fa-key"></i>
                            <strong>Attention:</strong> L'utilisateur doit changer son mot de passe à sa prochaine connexion.
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Affectations et permissions -->
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-hospital"></i>
                        Affectations aux centres
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.CenterAssignments.Any())
                    {
                        @foreach (var assignment in Model.CenterAssignments)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-3 p-3 bg-light rounded">
                                <div>
                                    <h6 class="mb-1">@assignment.CenterName</h6>
                                    <span class="badge @(assignment.Role == "SuperAdmin" ? "bg-danger" : "bg-primary")">
                                        @(assignment.Role == "SuperAdmin" ? "Super Administrateur" : "Personnel Soignant")
                                    </span>
                                </div>
                                <div class="text-end">
                                    <span class="badge bg-success">
                                        <i class="fas fa-check"></i>
                                        Actif
                                    </span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i>
                            Aucune affectation active. L'utilisateur ne peut pas se connecter.
                        </div>
                    }
                </div>
            </div>

            <!-- Sessions actives -->
            <div class="card mt-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-globe"></i>
                        Sessions actives
                        <span class="badge bg-info ms-2">@Model.TotalSessions</span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.HasActiveSessions)
                    {
                        @foreach (var session in Model.ActiveSessions)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded">
                                <div>
                                    <strong>@session.CurrentCenterName</strong>
                                    <br>
                                    <small class="text-muted">
                                        <i class="fas fa-clock"></i>
                                        Connecté depuis @session.DurationText
                                    </small>
                                    @if (!string.IsNullOrEmpty(session.IpAddress))
                                    {
                                        <br>
                                        <small class="text-muted">
                                            <i class="fas fa-network-wired"></i>
                                            @session.IpAddress
                                        </small>
                                    }
                                </div>
                                <div>
                                    <span class="badge bg-success">
                                        <i class="fas fa-circle"></i>
                                        En ligne
                                    </span>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="fas fa-user-slash fa-2x mb-2"></i>
                            <p>Aucune session active</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Actions rapides -->
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-tools"></i>
                        Actions rapides
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            @if (Model.CanResetPassword)
                            {
                                <button class="btn btn-outline-warning w-100 mb-2"
                                        onclick="resetPassword(@Model.User.Id, '@Model.FullName')">
                                    <i class="fas fa-key"></i>
                                    Réinitialiser mot de passe
                                </button>
                            }
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-info w-100 mb-2" onclick="viewLoginHistory()">
                                <i class="fas fa-history"></i>
                                Historique connexions
                            </button>
                        </div>
                        <div class="col-md-3">
                            @if (Model.HasActiveSessions)
                            {
                                <button class="btn btn-outline-danger w-100 mb-2"
                                        onclick="forceLogout(@Model.User.Id, '@Model.FullName')">
                                    <i class="fas fa-sign-out-alt"></i>
                                    Forcer déconnexion
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-secondary w-100 mb-2" disabled>
                                    <i class="fas fa-sign-out-alt"></i>
                                    Pas de sessions actives
                                </button>
                            }
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-primary w-100 mb-2"
                                    onclick="toggleUserStatus(@Model.User.Id, @Model.User.IsActive.ToString().ToLower(), '@Model.FullName')">
                                <i class="fas fa-@(Model.User.IsActive ? "user-slash" : "user-check")"></i>
                                @(Model.User.IsActive ? "Désactiver" : "Activer") compte
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Historique des connexions -->
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-history"></i>
                        Historique des connexions (30 derniers jours)
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.LoginHistory.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Date/Heure connexion</th>
                                        <th>Centre</th>
                                        <th>Adresse IP</th>
                                        <th>Durée</th>
                                        <th>Statut</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var login in Model.LoginHistory.Take(10))
                                    {
                                        <tr>
                                            <td>@login.LoginTimeText</td>
                                            <td>@login.CenterName</td>
                                            <td>
                                                <small class="text-muted">@(login.IpAddress ?? "Non disponible")</small>
                                            </td>
                                            <td>@login.DurationText</td>
                                            <td>
                                                @if (login.IsCurrentSession)
                                                {
                                                    <span class="badge bg-success">Session actuelle</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Terminée</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        @if (Model.LoginHistory.Count > 10)
                        {
                            <div class="text-center mt-3">
                                <button class="btn btn-outline-primary btn-sm" onclick="viewFullLoginHistory()">
                                    Voir tout l'historique (@Model.LoginHistory.Count connexions)
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="fas fa-history fa-2x mb-2"></i>
                            <p>Aucune connexion enregistrée dans les 30 derniers jours</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<!-- Modal pour historique détaillé -->
<div class="modal fade" id="loginHistoryModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-history"></i>
                    Historique complet des connexions
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="fullLoginHistoryContent">
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Connexion</th>
                                    <th>Déconnexion</th>
                                    <th>Centre</th>
                                    <th>Durée</th>
                                    <th>IP</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var login in Model.LoginHistory)
                                {
                                    <tr>
                                        <td>@login.LoginTimeText</td>
                                        <td>@login.LogoutTimeText</td>
                                        <td>@login.CenterName</td>
                                        <td>@login.DurationText</td>
                                        <td><small>@(login.IpAddress ?? "-")</small></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function viewLoginHistory() {
            const modal = new bootstrap.Modal(document.getElementById('loginHistoryModal'));
            modal.show();
        }

        function viewFullLoginHistory() {
            viewLoginHistory();
        }

        function resetPassword(userId, userName) {
            if (confirm(`Êtes-vous sûr de vouloir réinitialiser le mot de passe de ${userName} ?`)) {
                fetch('@Url.Action("ResetPassword", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(userId)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        alert(`Mot de passe réinitialisé avec succès.\nNouveau mot de passe temporaire: ${result.temporaryPassword}`);
                        location.reload();
                    } else {
                        alert(`Erreur: ${result.message}`);
                    }
                })
                .catch(error => {
                    alert('Erreur lors de la réinitialisation du mot de passe');
                });
            }
        }

        function forceLogout(userId, userName) {
            if (confirm(`Êtes-vous sûr de vouloir forcer la déconnexion de ${userName} ?`)) {
                fetch('@Url.Action("ForceLogout", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(userId)
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert(`Erreur: ${result.message}`);
                    }
                })
                .catch(error => {
                    alert('Erreur lors de la déconnexion forcée');
                });
            }
        }

        function toggleUserStatus(userId, isActive, userName) {
            const action = isActive ? 'désactiver' : 'activer';
            if (confirm(`Êtes-vous sûr de vouloir ${action} le compte de ${userName} ?`)) {
                fetch('@Url.Action("ToggleUserStatus", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ userId: userId, isActive: !isActive })
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert(`Erreur: ${result.message}`);
                    }
                })
                .catch(error => {
                    alert('Erreur lors de la modification du statut');
                });
            }
        }
    </script>
}

@section Styles {
    <style>
        .avatar-lg {
            width: 4rem;
            height: 4rem;
        }

        .avatar-title {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .badge-lg {
            font-size: 0.875rem;
            padding: 0.5rem 1rem;
        }

        .bg-light {
            background-color: #f8f9fa !important;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(0,123,255,0.05);
        }

        .text-muted {
            color: #6c757d !important;
        }

        dl dt {
            font-weight: 600;
            color: #495057;
        }

        dl dd {
            margin-bottom: 0.5rem;
        }

        .card-header h5 {
            color: #495057;
        }

        /* Boutons d'actions */
        .btn-outline-warning:hover {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #000;
        }

        .btn-outline-info:hover {
            background-color: #0dcaf0;
            border-color: #0dcaf0;
            color: #000;
        }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            border-color: #dc3545;
            color: white;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .col-md-3

        {
            margin-bottom: 0.5rem;
        }

        .btn {
            font-size: 0.875rem;
            padding: 0.375rem 0.75rem;
        }

        .avatar-lg {
            width: 3rem;
            height: 3rem;
        }

        .avatar-title {
            font-size: 1rem;
        }

        }

        /* Animation pour les cartes */
        .card {
            transition: box-shadow 0.3s ease;
        }

            .card:hover {
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }

        /* Amélioration des badges */
        .badge {
            font-weight: 500;
        }

            .badge i {
                margin-right: 0.25rem;
            }

        /* Table responsive */
        .table-responsive {
            border-radius: 0.375rem;
        }

        .table th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
        }
    </style>
}