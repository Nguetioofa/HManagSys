@using HManagSys.Models.ViewModels.Payments
@using HManagSys.Models.ViewModels.Patients

@model PatientPaymentsViewModel
@{
    ViewData["Title"] = $"Finances Patient - {Model.Patient.FullName}";
}

<!-- En-tête de la page -->
<div class="pt-3 mb-4">
    <div class="d-flex flex-column flex-sm-row justify-content-sm-between align-items-sm-center">
        <div class="mb-2 mb-sm-0">
            <h1 class="h2 mb-0 text-gray-800 font-weight-bold">
                <i class="fas fa-file-invoice-dollar text-primary me-2"></i>Finances du Patient
            </h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb breadcrumb-custom">
                    <li class="breadcrumb-item"><a asp-controller="Patient" asp-action="Index">Patients</a></li>
                    <li class="breadcrumb-item"><a asp-controller="Patient" asp-action="Details" asp-route-id="@Model.Patient.Id">@Model.Patient.FullName</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Historique des Paiements</li>
                </ol>
            </nav>
        </div>
        <div class="btn-group">
            @if (Model.Summary.HasDebt)
            {
                <button type="button" class="btn btn-sm btn-success" onclick="showNewPaymentModal()">
                    <i class="fas fa-plus-circle me-1"></i> Enregistrer un Paiement
                </button>
            }
            <a asp-controller="Patient" asp-action="Details" asp-route-id="@Model.Patient.Id" class="btn btn-sm btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i> Retour au Dossier Patient
            </a>
        </div>
    </div>
</div>

<!-- Section Résumé Patient et KPIs Financiers -->
<div class="row mb-4">
    <div class="col-lg-4 mb-3 mb-lg-0">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-transparent py-2 border-bottom-0">
                <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-user-circle me-2"></i>@Model.Patient.FullName</h6>
            </div>
            <div class="card-body pt-2">
                <div class="detail-item mb-2"><small class="text-muted-light">ID PATIENT</small><div class="fw-bold">@Model.Patient.Id</div></div>
                @if (Model.Patient.DateOfBirth.HasValue)
                {
                    <div class="detail-item mb-2"><small class="text-muted-light">ÂGE</small><div class="fw-bold">@Model.Patient.DateOfBirth.Value.ToString("dd/MM/yyyy") (@Model.Patient.Age ans)</div></div>
                }
                <div class="detail-item mb-2"><small class="text-muted-light">TÉLÉPHONE</small><div class="fw-bold">@Model.Patient.PhoneNumber</div></div>
                @if (!string.IsNullOrEmpty(Model.Patient.Email))
                {
                    <div class="detail-item mb-2"><small class="text-muted-light">EMAIL</small><div class="fw-bold">@Model.Patient.Email</div></div>
                }
                <hr class="my-2">
                <div class="d-flex justify-content-around text-center small">
                    <div><span class="fw-bold d-block">@Model.Patient.CareEpisodeCount</span> Épisodes</div>
                    <div><span class="fw-bold d-block">@Model.Patient.DiagnosisCount</span> Diagnostics</div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-8">
        <div class="row">
            <div class="col-sm-6 col-md-3 mb-3">
                <div class="card card-kpi shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-receipt fa-2x text-primary-soft"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <p class="text-muted mb-0 small text-uppercase">Total Dû</p>
                                <h4 class="mb-0">@Model.Summary.FormattedTotalDue</h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-md-3 mb-3">
                <div class="card card-kpi shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-hand-holding-usd fa-2x text-success-soft"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <p class="text-muted mb-0 small text-uppercase">Total Payé</p>
                                <h4 class="mb-0 text-success">@Model.Summary.FormattedTotalPaid</h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-md-3 mb-3">
                <div class="card card-kpi shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-balance-scale fa-2x @(Model.Summary.Balance > 0 ? "text-danger-soft" : "text-success-soft")"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <p class="text-muted mb-0 small text-uppercase">Solde Actuel</p>
                                <h4 class="mb-0 @Model.Summary.BalanceClass">@Model.Summary.FormattedBalance</h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-md-3 mb-3">
                <div class="card card-kpi shadow-sm h-100">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-cash-register fa-2x text-info-soft"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <p class="text-muted mb-0 small text-uppercase">Paiements</p>
                                <h4 class="mb-0">@Model.Summary.PaymentCount</h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card shadow-sm mt-0">
            @* Removed mb-lg-0 to allow progress bar to be closer to KPIs *@
            <div class="card-body pt-2 pb-3">
                <h6 class="text-muted small mb-1">Progression du Paiement Global</h6>
                @{
                    var paymentPercentage = Model.Summary.TotalDue > 0
                    ? (int)Math.Round(Math.Min(100, (Model.Summary.TotalPaid / Model.Summary.TotalDue) * 100))
                    : (Model.Summary.TotalPaid > 0 ? 100 : 0); // If nothing due but paid something (overpayment), show 100%
                    var progressBarClass = paymentPercentage >= 100 ? "bg-success" : (paymentPercentage >= 50 ? "bg-primary" : "bg-warning");
                }
                <div class="progress" style="height: 10px;">
                    <div class="progress-bar @progressBarClass" role="progressbar"
                         style="width: @paymentPercentage%"
                         aria-valuenow="@paymentPercentage" aria-valuemin="0" aria-valuemax="100">
                    </div>
                </div>
                <div class="text-end small text-muted mt-1">@paymentPercentage% payé</div>
            </div>
        </div>
    </div>
</div>

<!-- Analyse des Paiements (Graphiques simulés) -->
<div class="row mb-4">
    <div class="col-md-6 mb-3 mb-md-0">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-transparent py-2 border-bottom-0">
                <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-chart-pie me-2"></i>Répartition par Type de Service</h6>
            </div>
            <div class="card-body pt-2">
                @if (Model.Summary.PaymentsByType.Any())
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var paymentType in Model.Summary.PaymentsByType.OrderByDescending(p => p.Value))
                        {
                            var typePercentage = Model.Summary.TotalPaid > 0 ? (paymentType.Value / Model.Summary.TotalPaid) * 100 : 0;
                            <li class="list-group-item px-0 py-2 d-flex justify-content-between align-items-center">
                                <span>
                                    <i class="@GetIconForPaymentType(paymentType.Key) me-2 text-muted"></i>
                                    @(paymentType.Key == "CareEpisode" ? "Épisode de Soins" : paymentType.Key == "Examination" ? "Examen" : paymentType.Key)
                                </span>
                                <span>
                                    <span class="fw-bold">@paymentType.Value.ToString("N0") FCFA</span>
                                    <small class="text-muted ms-2">(@typePercentage.ToString("N1")%)</small>
                                </span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="alert alert-secondary-soft text-center p-3"><i class="fas fa-info-circle me-1"></i>Aucune donnée.</div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow-sm h-100">
            <div class="card-header bg-transparent py-2 border-bottom-0">
                <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-credit-card me-2"></i>Répartition par Méthode de Paiement</h6>
            </div>
            <div class="card-body pt-2">
                @if (Model.Summary.PaymentsByMethod.Any())
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var paymentMethod in Model.Summary.PaymentsByMethod.OrderByDescending(p => p.Value))
                        {
                            var methodPercentage = Model.Summary.TotalPaid > 0 ? (paymentMethod.Value / Model.Summary.TotalPaid) * 100 : 0;
                            <li class="list-group-item px-0 py-2 d-flex justify-content-between align-items-center">
                                <span>
                                    <i class="@GetIconForPaymentMethod(paymentMethod.Key) me-2 text-muted"></i>
                                    @paymentMethod.Key
                                </span>
                                <span>
                                    <span class="fw-bold">@paymentMethod.Value.ToString("N0") FCFA</span>
                                    <small class="text-muted ms-2">(@methodPercentage.ToString("N1")%)</small>
                                </span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <div class="alert alert-secondary-soft text-center p-3"><i class="fas fa-info-circle me-1"></i>Aucune donnée.</div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Historique Détaillé des Paiements -->
<div class="card shadow-sm">
    <div class="card-header bg-transparent py-2 border-bottom-0 d-flex flex-column flex-sm-row justify-content-sm-between align-items-sm-center">
        <h6 class="m-0 font-weight-bold text-primary mb-2 mb-sm-0"><i class="fas fa-list-ul me-2"></i>Historique Détaillé des Paiements</h6>
        <div class="btn-group btn-group-sm" role="group">
            <input type="checkbox" class="btn-check" id="filterCancelled" autocomplete="off" checked>
            <label class="btn btn-outline-secondary" for="filterCancelled">
                <i class="fas fa-eye-slash me-1"></i> Masquer Annulés
            </label>
        </div>
    </div>
    <div class="card-body pt-2">
        @if (Model.Payments.Any())
        {
            <div class="table-responsive">
                <table class="table table-sm table-hover table-nowrap" id="paymentsTable">
                    <thead class="table-light-custom">
                        <tr>
                            <th>ID</th>
                            <th>Date</th>
                            <th>Référence</th>
                            <th>Méthode</th>
                            <th class="text-end">Montant</th>
                            <th>Reçu par</th>
                            <th>Statut</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in Model.Payments.OrderByDescending(p => p.PaymentDate))
                        {
                            <tr data-status-cancelled="@payment.IsCancelled.ToString().ToLower()">
                                <td>@payment.Id</td>
                                <td>@payment.FormattedDate</td>
                                <td>
                                    <span class="d-block">@payment.ReferenceDescription</span>
                                    <small class="text-muted">@payment.ReferenceText</small>
                                </td>
                                <td>@payment.PaymentMethodName</td>
                                <td class="text-end fw-bold">@payment.FormattedAmount</td>
                                <td>@payment.ReceivedByName</td>
                                <td>
                                    <span class="badge @GetPaymentStatusBadgeClass(payment.IsCancelled) fs-sm">
                                        @payment.StatusText
                                    </span>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group">
                                        <a asp-controller="Payment" asp-action="Details" asp-route-id="@payment.Id" class="btn btn-xs btn-outline-primary" title="Voir Détails">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-controller="Payment" asp-action="Receipt" asp-route-id="@payment.Id" target="_blank" class="btn btn-xs btn-outline-success" title="Imprimer Reçu">
                                            <i class="fas fa-receipt"></i>
                                        </a>
                                        @if (!payment.IsCancelled && User.IsInRole("Admin")) // Exemple de condition pour annuler
                                        {
                                            <button type="button" class="btn btn-xs btn-outline-danger" title="Annuler Paiement"
                                                    onclick="confirmCancelPayment(@payment.Id)">
                                                <i class="fas fa-times-circle"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-secondary-soft text-center p-4">
                <i class="fas fa-search-dollar fa-3x mb-3 d-block text-muted"></i>
                <h5 class="text-gray-600">Aucun paiement enregistré</h5>
                <p class="text-muted">L'historique financier de ce patient est vide.</p>
            </div>
        }
    </div>
</div>

<!-- Modal pour un nouveau paiement (gardé tel quel avec quelques ajustements mineurs) -->
<div class="modal fade" id="newPaymentModal" tabindex="-1" aria-labelledby="newPaymentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        @* Adjusted size and centering *@
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="newPaymentModalLabel"><i class="fas fa-plus-circle me-2"></i>Enregistrer un Nouveau Paiement</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newPaymentForm" class="needs-validation" novalidate>
                    @Html.AntiForgeryToken() @* Important pour la sécurité *@
                    <input type="hidden" id="patientId" value="@Model.Patient.Id" />
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="referenceType" class="form-label">Payer pour <span class="text-danger">*</span></label>
                            <select id="referenceType" class="form-select form-select-sm" required>
                                <option value="">-- Sélectionner le type --</option>
                                <option value="CareEpisode">Épisode de soins</option>
                                <option value="Examination">Examen</option>
                                <option value="Other">Autre (Avance, Solde global)</option>
                            </select>
                            <div class="invalid-feedback">Veuillez sélectionner un type de référence.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="referenceId" class="form-label">Référence Spécifique</label>
                            <select id="referenceId" class="form-select form-select-sm" disabled>
                                <option value="">-- Sélectionner le type d'abord --</option>
                            </select>
                            <div class="form-text small" id="referenceAmountDueText"></div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="amount" class="form-label">Montant à Payer <span class="text-danger">*</span></label>
                            <div class="input-group input-group-sm">
                                <input type="number" id="amount" class="form-control" min="1" required>
                                <span class="input-group-text">FCFA</span>
                            </div>
                            <div class="invalid-feedback">Veuillez entrer un montant valide.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="paymentMethodId" class="form-label">Méthode de Paiement <span class="text-danger">*</span></label>
                            <select id="paymentMethodId" class="form-select form-select-sm" required>
                                <option value="">-- Sélectionner --</option>
                                @* Remplir dynamiquement ou depuis le modèle si disponible *@
                                <option value="1">Espèces</option>
                                <option value="2">Orange Money</option>
                                <option value="3">MTN Mobile Money</option>
                                <option value="4">Carte Bancaire</option>
                                <option value="5">Chèque</option>
                            </select>
                            <div class="invalid-feedback">Veuillez sélectionner une méthode.</div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="transactionReference" class="form-label">Réf. Transaction (si applicable)</label>
                        <input type="text" id="transactionReference" class="form-control form-control-sm">
                    </div>
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes (Optionnel)</label>
                        <textarea id="notes" class="form-control form-control-sm" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-sm btn-primary" id="saveNewPaymentBtn">
                    <i class="fas fa-save me-1"></i> Enregistrer Paiement
                </button>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <style>
        .breadcrumb-custom {
            background-color: transparent;
            padding: 0.25rem 0;
            font-size: 0.8rem;
            margin-bottom: 0;
        }

            .breadcrumb-custom .breadcrumb-item a {
                color: #4e73df;
                text-decoration: none;
            }

                .breadcrumb-custom .breadcrumb-item a:hover {
                    text-decoration: underline;
                }

            .breadcrumb-custom .breadcrumb-item.active {
                color: #858796;
            }

        .detail-item small.text-muted-light {
            font-size: 0.70rem;
            letter-spacing: 0.5px;
            text-transform: uppercase;
            color: #a5a5c1 !important;
            display: block;
            margin-bottom: 0.1rem;
        }

        .detail-item .fw-bold {
            font-size: 0.9rem;
            color: #5a5c69;
            line-height: 1.4;
        }

        .card-kpi .card-body {
            padding: 1rem;
        }
        /* Ajuster padding pour KPI cards */
        .card-kpi i {
            opacity: 0.6;
        }

        .text-primary-soft i {
            color: #4e73df;
        }

        .text-success-soft i {
            color: #1cc88a;
        }

        .text-danger-soft i {
            color: #e74a3b;
        }

        .text-info-soft i {
            color: #36b9cc;
        }

        .text-warning-soft i {
            color: #f6c23e;
        }

        .progress {
            border-radius: 0.25rem;
        }
        /* Style de la barre de progression */

        /* Soft Alerts (si non déjà défini globalement) */
        .alert-secondary-soft {
            color: #858796;
            background-color: rgba(133, 135, 150, 0.1);
            border-color: rgba(133, 135, 150, 0.2);
        }


        .table-light-custom th {
            font-weight: 600;
            font-size: 0.75rem;
            text-transform: uppercase;
            color: #6e707e;
            background-color: #f8f9fc !important;
            letter-spacing: 0.5px;
        }

        .table-nowrap th, .table-nowrap td {
            white-space: nowrap;
        }

        .btn-xs {
            padding: 0.1rem 0.4rem;
            font-size: 0.75rem;
            border-radius: 0.2rem;
        }

        .list-group-item {
            border-left: 0;
            border-right: 0;
        }

            .list-group-item:first-child {
                border-top: 0;
            }

            .list-group-item:last-child {
                border-bottom: 0;
            }

        /* Pour le filtre des paiements annulés */
        #paymentsTable tbody tr[data-status-cancelled="true"] {
            /* background-color: #fee2e2 !important; /* Rouge très léger */
            opacity: 0.6; /* Les rendre un peu transparents */
        }

            #paymentsTable tbody tr[data-status-cancelled="true"].d-none {
                display: none !important; /* S'assurer qu'il est bien masqué */
            }

        .btn-check:checked + .btn-outline-secondary {
            color: #fff;
            background-color: #6c757d; /* Darker gray for active state */
            border-color: #6c757d;
        }

        .modal-header.bg-primary {
            background-color: #4e73df !important;
        }

    </style>
}

@section Scripts {
    <script>
        (function () {
            'use strict';

            // Filtre pour masquer/afficher les paiements annulés
            const filterCancelledCheckbox = document.getElementById('filterCancelled');
            const paymentsTableBody = document.querySelector('#paymentsTable tbody');

            if (filterCancelledCheckbox && paymentsTableBody) {
                function toggleCancelledRows() {
                    const rows = paymentsTableBody.querySelectorAll('tr[data-status-cancelled="true"]');
                    rows.forEach(row => {
                        if (filterCancelledCheckbox.checked) {
                            row.classList.add('d-none'); // Utiliser la classe Bootstrap pour masquer
                        } else {
                            row.classList.remove('d-none');
                        }
                    });
                    // Mettre à jour l'icône et le texte du label
                    const label = filterCancelledCheckbox.nextElementSibling;
                    if(label){
                        const icon = label.querySelector('i');
                        if (filterCancelledCheckbox.checked) {
                            if(icon) icon.classList.replace('fa-eye-slash', 'fa-eye');
                            label.childNodes[label.childNodes.length-1].nodeValue = " Afficher Annulés";
                        } else {
                             if(icon) icon.classList.replace('fa-eye', 'fa-eye-slash');
                            label.childNodes[label.childNodes.length-1].nodeValue = " Masquer Annulés";
                        }
                    }
                }
                filterCancelledCheckbox.addEventListener('change', toggleCancelledRows);
                toggleCancelledRows(); // Appel initial pour appliquer le filtre au chargement
            }

            // Gestion du modal de nouveau paiement
            const newPaymentModal = new bootstrap.Modal(document.getElementById('newPaymentModal'), { keyboard: false });
            const referenceTypeSelect = document.getElementById('referenceType');
            const referenceIdSelect = document.getElementById('referenceId');
            const amountInput = document.getElementById('amount');
            const referenceAmountDueText = document.getElementById('referenceAmountDueText');


            if (referenceTypeSelect) {
                referenceTypeSelect.addEventListener('change', function () {
                    const type = this.value;
                    referenceIdSelect.innerHTML = '<option value="">Chargement...</option>';
                    referenceIdSelect.disabled = true;
                    amountInput.value = '';
                    if(referenceAmountDueText) referenceAmountDueText.textContent = '';


                    if (type && type !== "Other") {
                        loadReferences(type, @Model.Patient.Id);
                    } else if (type === "Other") {
                         referenceIdSelect.innerHTML = '<option value="">N/A pour "Autre"</option>';
                         referenceIdSelect.disabled = true;
                    }
                    else {
                        referenceIdSelect.innerHTML = '<option value="">-- Sélectionner le type d\'abord --</option>';
                        referenceIdSelect.disabled = true;
                    }
                });
            }
             if (referenceIdSelect) {
                referenceIdSelect.addEventListener('change', function() {
                    const selectedOption = this.options[this.selectedIndex];
                    const amountDue = selectedOption.dataset.amount;
                    if (amountDue) {
                        amountInput.value = parseFloat(amountDue).toFixed(0);
                        if(referenceAmountDueText) referenceAmountDueText.textContent = `Montant dû pour cette référence : ${parseFloat(amountDue).toLocaleString('fr-FR')} FCFA`;
                    } else {
                         if(referenceAmountDueText) referenceAmountDueText.textContent = '';
                    }
                });
            }


            // Soumission du formulaire de nouveau paiement (avec validation Bootstrap)
            const newPaymentForm = document.getElementById('newPaymentForm');
            const saveNewPaymentBtn = document.getElementById('saveNewPaymentBtn');

            if (saveNewPaymentBtn && newPaymentForm) {
                saveNewPaymentBtn.addEventListener('click', function (event) {
                    if (!newPaymentForm.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                        newPaymentForm.classList.add('was-validated');
                        // Optionnel: afficher un toast d'erreur général pour les champs manquants
                        showGenericToast('Erreur de validation', 'Veuillez corriger les erreurs dans le formulaire.', 'error');
                        return;
                    }
                    newPaymentForm.classList.add('was-validated'); // Pour montrer les styles de validation

                    // Désactiver le bouton pour éviter double soumission
                    saveNewPaymentBtn.disabled = true;
                    saveNewPaymentBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Enregistrement...';

                    const paymentData = {
                        PatientId: parseInt(document.getElementById('patientId').value),
                        ReferenceType: referenceTypeSelect.value,
                        ReferenceId: referenceIdSelect.value ? parseInt(referenceIdSelect.value) : null,
                        Amount: parseFloat(amountInput.value),
                        PaymentMethodId: parseInt(document.getElementById('paymentMethodId').value),
                        TransactionReference: document.getElementById('transactionReference').value,
                        Notes: document.getElementById('notes').value,
                        __RequestVerificationToken: newPaymentForm.querySelector('input[name="__RequestVerificationToken"]').value
                    };

                    fetch('@Url.Action("Create", "PaymentApi")', { // Assurez-vous que cette URL est correcte pour votre API
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest' // Si votre backend vérifie cela
                        },
                        body: JSON.stringify(paymentData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showGenericToast('Succès', data.message || 'Paiement enregistré avec succès!', 'success');
                            newPaymentModal.hide();
                            setTimeout(() => location.reload(), 1500); // Recharger la page après succès
                        } else {
                            showGenericToast('Erreur', data.message || 'Une erreur est survenue lors de l\'enregistrement.', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showGenericToast('Erreur Technique', 'Une erreur technique est survenue.', 'error');
                    })
                    .finally(() => {
                         saveNewPaymentBtn.disabled = false;
                         saveNewPaymentBtn.innerHTML = '<i class="fas fa-save me-1"></i> Enregistrer Paiement';
                    });
                });
            }

            // Fonction pour afficher le modal (si appelée depuis un bouton externe)
            window.showNewPaymentModal = function() {
                newPaymentForm.classList.remove('was-validated'); // Reset validation
                newPaymentForm.reset(); // Reset form fields
                referenceIdSelect.innerHTML = '<option value="">-- Sélectionner le type d\'abord --</option>';
                referenceIdSelect.disabled = true;
                if(referenceAmountDueText) referenceAmountDueText.textContent = '';
                newPaymentModal.show();
            }
        })();

        function loadReferences(type, patientId) {
            const referenceIdSelect = document.getElementById('referenceId');
            referenceIdSelect.disabled = true;
            referenceIdSelect.innerHTML = '<option value="">Chargement...</option>';

            fetch(`@Url.Action("GetPayableReferences", "PaymentApi")?type=${type}&patientId=${patientId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.references.length > 0) {
                        let optionsHtml = '<option value="">-- Sélectionner une référence --</option>';
                        data.references.forEach(ref => {
                            optionsHtml += `<option value="${ref.id}" data-amount="${ref.remainingAmount}">${ref.description} (Dû: ${ref.remainingAmount.toLocaleString('fr-FR')} FCFA)</option>`;
                        });
                        referenceIdSelect.innerHTML = optionsHtml;
                        referenceIdSelect.disabled = false;
                    } else {
                        referenceIdSelect.innerHTML = `<option value="">Aucune référence ${type === 'CareEpisode' ? 'd\'épisode de soins' : 'd\'examen'} impayée trouvée</option>`;
                         // On pourrait laisser sélectionnable pour un paiement "Autre" non lié à une réf spécifique
                        // referenceIdSelect.disabled = true;
                    }
                })
                .catch(error => {
                    console.error('Error loading references:', error);
                    referenceIdSelect.innerHTML = '<option value="">Erreur de chargement</option>';
                });
        }

        // Placeholder pour une fonction de toast générique (à remplacer par votre implémentation)
        function showGenericToast(title, message, type = 'info') {
            // Exemple simple avec alert, idéalement utiliser une librairie de Toasts (Bootstrap, Toastr, etc.)
            console.log(`Toast (${type}): ${title} - ${message}`);
            // alert(`${title}\n${message}`);
            // Si vous avez une fonction de toast existante, appelez-la ici
            // e.g., if (typeof window.showToast === 'function') { window.showToast(title, message, type); }
        }
         function confirmCancelPayment(paymentId) {
            // Utiliser SweetAlert2 pour une belle confirmation
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'Êtes-vous sûr?',
                    text: "Voulez-vous vraiment annuler ce paiement? Cette action pourrait être irréversible.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Oui, annuler!',
                    cancelButtonText: 'Non, garder'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Demander la raison de l'annulation
                        Swal.fire({
                            title: 'Raison de l\'annulation',
                            input: 'textarea',
                            inputPlaceholder: 'Entrez la raison de l\'annulation ici...',
                            inputAttributes: {
                                'aria-label': 'Raison de l\'annulation'
                            },
                            showCancelButton: true,
                            confirmButtonText: 'Confirmer l\'annulation',
                            cancelButtonText: 'Ne pas annuler',
                            preConfirm: (reason) => {
                                if (!reason) {
                                    Swal.showValidationMessage('La raison est obligatoire');
                                }
                                return reason;
                            }
                        }).then((reasonResult) => {
                            if (reasonResult.isConfirmed && reasonResult.value) {
                                proceedWithCancellation(paymentId, reasonResult.value);
                            }
                        });
                    }
                });
            } else {
                // Fallback si SweetAlert2 n'est pas disponible
                if (confirm("Voulez-vous vraiment annuler ce paiement?")) {
                    const reason = prompt("Veuillez entrer la raison de l'annulation (obligatoire):");
                    if (reason) {
                        proceedWithCancellation(paymentId, reason);
                    } else if (reason === "") {
                        alert("La raison de l'annulation est obligatoire.");
                    }
                }
            }
        }

        function proceedWithCancellation(paymentId, reason) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            fetch(`@Url.Action("Cancel", "PaymentApi")/${paymentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ cancellationReason: reason })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Annulé!', data.message || 'Le paiement a été annulé.', 'success')
                           .then(() => location.reload());
                    } else {
                        alert(data.message || 'Le paiement a été annulé.');
                        location.reload();
                    }
                } else {
                     if (typeof Swal !== 'undefined') {
                        Swal.fire('Erreur', data.message || 'Impossible d\'annuler le paiement.', 'error');
                    } else {
                        alert(data.message || 'Impossible d\'annuler le paiement.');
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                 if (typeof Swal !== 'undefined') {
                    Swal.fire('Erreur', 'Une erreur technique est survenue.', 'error');
                } else {
                    alert('Une erreur technique est survenue.');
                }
            });
        }
    </script>
}

@functions {
    public string GetPaymentStatusBadgeClass(bool isCancelled)
    {
        return isCancelled ? "badge-danger-soft" : "badge-success-soft";
    }

    public string GetIconForPaymentType(string paymentTypeKey)
    {
        return paymentTypeKey switch
        {
            "CareEpisode" => "fas fa-procedures",
            "Examination" => "fas fa-microscope",
            "Consultation" => "fas fa-user-md",
            "ProductSale" => "fas fa-pills",
            _ => "fas fa-receipt"
        };
    }

    public string GetIconForPaymentMethod(string paymentMethodKey)
    {
        // Convertir en minuscules et sans espaces pour une comparaison plus robuste
        string key = paymentMethodKey.ToLowerInvariant().Replace(" ", "");
        if (key.Contains("espèce") || key.Contains("cash")) return "fas fa-money-bill-wave";
        if (key.Contains("orange")) return "fab fa-orange"; // Placeholder, FontAwesome might not have specific brand icons by default
        if (key.Contains("mtn") || key.Contains("momo")) return "fas fa-mobile-alt"; // General mobile icon
        if (key.Contains("carte") || key.Contains("card") || key.Contains("visa") || key.Contains("mastercard")) return "fas fa-credit-card";
        if (key.Contains("chèque") || key.Contains("cheque")) return "fas fa-money-check-alt";
        if (key.Contains("virement") || key.Contains("transfer")) return "fas fa-exchange-alt";
        return "fas fa-credit-card"; // Default
    }
}

@* @using HManagSys.Models.ViewModels.Payments
@model PatientPaymentsViewModel
@{
    ViewData["Title"] = $"Historique des paiements - {Model.Patient.FullName}";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Patient" asp-action="Index">Patients</a></li>
            <li class="breadcrumb-item"><a asp-controller="Patient" asp-action="Details" asp-route-id="@Model.Patient.Id">@Model.Patient.FullName</a></li>
            <li class="breadcrumb-item active">Historique des paiements</li>
        </ol>
    </nav>
    <div>
        <a asp-controller="Patient" asp-action="Details" asp-route-id="@Model.Patient.Id" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Retour
        </a>
    </div>
</div>

<!-- Carte d'information du patient -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="fas fa-user"></i> Information patient
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p class="mb-1"><strong>Nom:</strong> @Model.Patient.FullName</p>
                        @if (Model.Patient.DateOfBirth.HasValue)
                        {
                            <p class="mb-1"><strong>Date de naissance:</strong> @Model.Patient.DateOfBirth.Value.ToString("dd/MM/yyyy") (@Model.Patient.Age ans)</p>
                        }
                        <p class="mb-1"><strong>Téléphone:</strong> @Model.Patient.PhoneNumber</p>
                        @if (!string.IsNullOrEmpty(Model.Patient.Email))
                        {
                            <p class="mb-1"><strong>Email:</strong> @Model.Patient.Email</p>
                        }
                    </div>
                    <div class="col-md-6">
                        @if (!string.IsNullOrEmpty(Model.Patient.Gender))
                        {
                            <p class="mb-1"><strong>Genre:</strong> @Model.Patient.Gender</p>
                        }
                        @if (!string.IsNullOrEmpty(Model.Patient.BloodType))
                        {
                            <p class="mb-1"><strong>Groupe sanguin:</strong> @Model.Patient.BloodType</p>
                        }
                        <p class="mb-1"><strong>Épisodes de soins:</strong> @Model.Patient.CareEpisodeCount</p>
                        <p class="mb-1"><strong>Diagnostics:</strong> @Model.Patient.DiagnosisCount</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="fas fa-money-bill-wave"></i> Résumé financier
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <p class="text-muted mb-1">Total payé</p>
                            <h3 class="text-success mb-0">@Model.Summary.FormattedTotalPaid</h3>
                        </div>
                        <div class="mb-3">
                            <p class="text-muted mb-1">Total dû</p>
                            <h3 class="mb-0">@Model.Summary.FormattedTotalDue</h3>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <p class="text-muted mb-1">Solde</p>
                            <h3 class="@Model.Summary.BalanceClass mb-0">@Model.Summary.FormattedBalance</h3>
                        </div>
                        <div class="mb-3">
                            <p class="text-muted mb-1">Nombre de paiements</p>
                            <h3 class="mb-0">@Model.Summary.PaymentCount</h3>
                        </div>
                    </div>
                </div>
                
                <div class="progress mt-2 mb-3">
                    @{
                        var paymentPercentage = Model.Summary.TotalDue > 0
                        ? (int)Math.Min(100, (Model.Summary.TotalPaid / Model.Summary.TotalDue) * 100)
                        : 100;
                    }
                    <div class="progress-bar bg-success" role="progressbar"
                         style="width: @paymentPercentage%"
                         aria-valuenow="@paymentPercentage" aria-valuemin="0" aria-valuemax="100">
                        @paymentPercentage%
                    </div>
                </div>

                @if (Model.Summary.HasDebt)
                {
                    <a href="#" class="btn btn-primary btn-sm mt-2" onclick="showNewPaymentModal()">
                        <i class="fas fa-plus-circle"></i> Nouveau paiement
                    </a>
                }
            </div>
        </div>
    </div>
</div>

<!-- Analyse des paiements -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="fas fa-chart-pie"></i> Répartition par type
                </h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th class="text-end">Montant</th>
                                <th class="text-end">Pourcentage</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in Model.Summary.PaymentsByType)
                            {
                                var typePercentage = Model.Summary.TotalPaid > 0
                                ? (payment.Value / Model.Summary.TotalPaid) * 100
                                : 0;
                                <tr>
                                    <td>
                                        @(payment.Key == "CareEpisode" ? "Épisode de soins" :
                                                                            payment.Key == "Examination" ? "Examen" : payment.Key)
                                </td>
                                <td class="text-end">@payment.Value.ToString("N0") FCFA</td>
                                <td class="text-end">@typePercentage.ToString("N1")%</td>
                            </tr>
                                                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="fas fa-credit-card"></i> Répartition par méthode
                </h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Méthode</th>
                                <th class="text-end">Montant</th>
                                <th class="text-end">Pourcentage</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in Model.Summary.PaymentsByMethod)
                            {
                                var methodPercentage = Model.Summary.TotalPaid > 0
                                ? (payment.Value / Model.Summary.TotalPaid) * 100
                                : 0;
                                <tr>
                                    <td>@payment.Key</td>
                                    <td class="text-end">@payment.Value.ToString("N0") FCFA</td>
                                    <td class="text-end">@methodPercentage.ToString("N1")%</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Historique des paiements -->
<div class="card shadow-sm">
    <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">
            <i class="fas fa-history"></i> Historique des paiements
        </h5>
        <div>
            <button type="button" class="btn btn-sm btn-outline-secondary" id="toggleCancelledBtn">
                <i class="fas fa-eye-slash"></i> Masquer annulés
            </button>
        </div>
    </div>
    <div class="card-body">
        @if (Model.Payments.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover" id="paymentsTable">
                    <thead class="table-light">
                        <tr>
                            <th>ID</th>
                            <th>Date</th>
                            <th>Référence</th>
                            <th>Méthode</th>
                            <th class="text-end">Montant</th>
                            <th>Reçu par</th>
                            <th>Statut</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var payment in Model.Payments.OrderByDescending(p => p.PaymentDate))
                        {
                            <tr class="@(payment.IsCancelled ? "table-danger cancelled-row" : "")">
                                <td>@payment.Id</td>
                                <td>@payment.FormattedDate</td>
                                <td>
                                    <span>@payment.ReferenceDescription</span>
                                    <small class="d-block text-muted">@payment.ReferenceText</small>
                                </td>
                                <td>@payment.PaymentMethodName</td>
                                <td class="text-end">@payment.FormattedAmount</td>
                                <td>@payment.ReceivedByName</td>
                                <td>
                                    <span class="@payment.StatusBadge">@payment.StatusText</span>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group">
                                        <a asp-controller="Payment" asp-action="Details" asp-route-id="@payment.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a asp-controller="Payment" asp-action="Receipt" asp-route-id="@payment.Id" class="btn btn-sm btn-outline-success">
                                            <i class="fas fa-receipt"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                <i class="fas fa-info-circle"></i> Aucun paiement enregistré pour ce patient.
            </div>
        }
    </div>
</div>

<!-- Modal pour un nouveau paiement -->
<div class="modal fade" id="newPaymentModal" tabindex="-1" aria-labelledby="newPaymentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newPaymentModalLabel">Nouveau paiement</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newPaymentForm">
                    <div class="form-group mb-3">
                        <label for="referenceType" class="form-label">Type de référence</label>
                        <select id="referenceType" class="form-select" required>
                            <option value="">-- Sélectionner --</option>
                            <option value="CareEpisode">Épisode de soins</option>
                            <option value="Examination">Examen</option>
                        </select>
                    </div>

                    <div class="form-group mb-3">
                        <label for="referenceId" class="form-label">Référence</label>
                        <select id="referenceId" class="form-select" required disabled>
                            <option value="">-- Sélectionner d'abord un type --</option>
                        </select>
                    </div>

                    <div class="form-group mb-3">
                        <label for="amount" class="form-label">Montant</label>
                        <div class="input-group">
                            <input type="number" id="amount" class="form-control" min="1" required>
                            <span class="input-group-text">FCFA</span>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label for="paymentMethodId" class="form-label">Méthode de paiement</label>
                        <select id="paymentMethodId" class="form-select" required>
                            <option value="">-- Sélectionner --</option>
                            <option value="1">Espèces</option>
                            <option value="2">Orange Money</option>
                            <option value="3">MTN Mobile Money</option>
                        </select>
                    </div>

                    <div class="form-group mb-3">
                        <label for="transactionReference" class="form-label">Référence de transaction</label>
                        <input type="text" id="transactionReference" class="form-control">
                        <div class="form-text">Pour les paiements mobiles</div>
                    </div>

                    <div class="form-group mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea id="notes" class="form-control" rows="2"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="saveNewPayment">
                    <i class="fas fa-save"></i> Enregistrer
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Toggle affichage des paiements annulés
            let showCancelled = true;
            $("#toggleCancelledBtn").click(function() {
                showCancelled = !showCancelled;
                if (showCancelled) {
                    $(".cancelled-row").show();
                    $(this).html('<i class="fas fa-eye-slash"></i> Masquer annulés');
                } else {
                    $(".cancelled-row").hide();
                    $(this).html('<i class="fas fa-eye"></i> Afficher annulés');
                }
            });

            // Gestion changement type de référence
            $("#referenceType").change(function() {
                const type = $(this).val();
                if (type) {
                    $('#referenceId').prop('disabled', false);
                    loadReferences(type);
                } else {
                    $('#referenceId').prop('disabled', true);
                    $('#referenceId').html('<option value="">-- Sélectionner d\'abord un type --</option>');
                }
            });

        // Confirmer le paiement
            $('#saveNewPayment').click(function() {
                var amount = $('#paymentAmount').val();
                var methodId = $('#paymentMethod').val();
                var reference = $('#transactionReference').val();
                var notes = $('#paymentNotes').val();

                if (!amount || !methodId) {
                    alert('Veuillez remplir tous les champs obligatoires');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("AddPayment", "Payment")',
                    type: 'POST',
                    data: {
                        referenceType: 'CareEpisode',
                        referenceId: @Model.Patient,
                        patientId: @Model.Summary.PatientId,
                        amount: amount,
                        paymentMethodId: methodId,
                        transactionReference: reference,
                        notes: notes,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(data) {
                        if (data.success) {
                            showToast('Succès', data.message, 'success');
                            setTimeout(function() {
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('Erreur', data.message || 'Erreur lors de l\'enregistrement', 'error');
                        }
                        $('#paymentModal').modal('hide');
                    },
                    error: function() {
                        showToast('Erreur', 'Une erreur est survenue', 'error');
                        $('#paymentModal').modal('hide');
                    }
                });
            });
        });

        // Afficher modal nouveau paiement
        function showNewPaymentModal() {
            $('#newPaymentModal').modal('show');
        }

        // Charger les références selon le type
        function loadReferences(type) {
            $.ajax({
                url: '@Url.Action("GetReferences", "Payment")',
                type: 'GET',
                data: {
                    type: type,
                    patientId: @Model.Patient.Id
                },
                success: function(data) {
                    if (data.success) {
                        let options = '<option value="">-- Sélectionner --</option>';
                        data.references.forEach(function(ref) {
                            options += `<option value="${ref.id}" data-amount="${ref.remainingAmount}">${ref.description}</option>`;
                        });
                        $('#referenceId').html(options);

                        // Événement sur changement de référence
                        $('#referenceId').change(function() {
                            const option = $(this).find('option:selected');
                            const amount = option.data('amount');
                            if (amount) {
                                $('#amount').val(amount);
                            }
                        });
                    } else {
                        $('#referenceId').html('<option value="">Aucune référence disponible</option>');
                    }
                },
                error: function() {
                    $('#referenceId').html('<option value="">Erreur lors du chargement</option>');
                }
            });
        }

        // Fonction toast
        function showToast(title, message, type) {
            // Implémentation selon votre système de notification
            // Si vous utilisez bootstrap toast ou une autre librairie
        }
    </script>
} *@